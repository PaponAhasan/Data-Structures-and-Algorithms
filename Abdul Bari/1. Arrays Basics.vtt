WEBVTT

0
00:00.740 --> 00:07.330
In this section I will be revising the concepts of C and C++ programming that are used in this course

1
00:07.710 --> 00:11.160
as the courses data structures just using C and C++.

2
00:11.160 --> 00:13.350
Basically the course is in C language.

3
00:13.950 --> 00:18.140
Plus I have also shown how to write on the code in C++.

4
00:18.140 --> 00:21.710
Also it is added advantage if you know C++.

5
00:21.750 --> 00:27.000
Even if you don't know C++ it is sufficient to know C language so you should be already knowing basics

6
00:27.000 --> 00:27.770
of C programming.

7
00:27.780 --> 00:33.390
We should already have some experience of C programming under the concepts of C programming that are

8
00:33.390 --> 00:35.100
frequently used in this course.

9
00:35.100 --> 00:40.230
I'm going to revise them so you are well acquainted or well familiar with those concepts and you

10
00:40.230 --> 00:43.050
can easily understand the rest of the topics.

11
00:43.170 --> 00:49.040
So in this section, I'll be going to discuss about basic subject areas though we have a big topic on arrays

12
00:49.080 --> 00:51.030
there are a lot of things we are going to learn about.

13
00:51.360 --> 00:57.810
But here basics about arrays, I will discuss then structures in C language, then pointers, What are pointers

14
00:57.810 --> 01:06.360
you will study, references parameter passing in C as well as C++, then classes, constructors and templates.

15
01:06.360 --> 01:12.720
These topics are related to C++, these topics are in C language, so these topics are more frequently used

16
01:12.990 --> 01:16.320
and how do we use them and what is the approach I'm following.

17
01:16.320 --> 01:20.180
You can understand that approach from these topics. And one more thing.

18
01:20.460 --> 01:25.560
If you are already very familiar with C++ programming and you are a good programmer I suggest you to

19
01:25.590 --> 01:32.700
go through this section so that you understand style of programming that I have adopted in this course and

20
01:32.700 --> 01:38.250
you get very familiar and it will be very easy for you to understand the rest of the topics.

21
01:38.400 --> 01:40.380
So let us start with Arrays.

22
01:40.380 --> 01:44.600
So, right now I will discuss a little bit about arrays, then in coming videos,

23
01:44.610 --> 01:46.660
We will learn about all these things one by one.

24
01:47.420 --> 01:53.810
So let us start with arrays. Arrays are defined as a collection of similar data elements.

25
01:53.880 --> 02:00.000
If you have some set of integers or set of floats, you can group them under one name as an array.

26
02:00.270 --> 02:04.640
See the method of declaring an array is, if you want an integer type,

27
02:04.660 --> 02:06.840
let's say, int A[5]

28
02:06.840 --> 02:13.320
Then you get 5 integers, array name is A, and all those integers you can access them by the name A.

29
02:13.890 --> 02:22.650
So this is an array and you get 5 integer spaces and the indices will be 0 1 2 3 4 . So, 5 locations

30
02:22.650 --> 02:27.940
means the indices are from 0 to 4, total 5 spaces.

31
02:28.070 --> 02:32.040
Now I can store five digits, every location is an integer.

32
02:32.090 --> 02:34.730
Every location Integer, and if suppose, integer,

33
02:34.730 --> 02:40.720
If we assume integer is taking 2 bytes, then total will be 10 bytes; 2 bytes each.

34
02:40.720 --> 02:46.440
Now, each location can be accessed with the help of index, like A[0] = 27, so I can store 27

35
02:46.450 --> 02:50.310
at this place. Now, A[1]

36
02:50.330 --> 02:55.160
If I want to store something, then I can store a value then like this here.

37
02:56.120 --> 02:59.090
So you can now have the group of elements together at one place.

38
02:59.100 --> 03:03.600
Now I will show you, how to declare and initialize an array. Here, main ( )

39
03:03.610 --> 03:10.520
Now in this, suppose, I want to declare an array of size 5, an array of size of 5 will be created.

40
03:10.590 --> 03:11.900
Now, when the program is running,

41
03:11.900 --> 03:13.670
It runs inside the main memory.

42
03:13.670 --> 03:17.980
This is main memory, and the main memory is divided into three sections.

43
03:18.020 --> 03:25.640
That is code section, and stack and heap. It will be inside the code section and with any variable declared,

44
03:25.670 --> 03:31.800
like an array is declared, so it will be created here inside the stack.

45
03:31.820 --> 03:38.190
This is where the array will be created, and that will be directly accessible to the main function; and directly I

46
03:38.230 --> 03:42.120
can store the values, like already I have shown you I can store some values.

47
03:42.230 --> 03:44.980
10 5 8 3 9 , we can store them.

48
03:46.690 --> 03:52.390
This is how I can declare an array and where it will be created in the memory I have shown you.

49
03:52.390 --> 03:55.950
Next thing I will show you, how to declare and initialize a array,

50
03:55.960 --> 03:57.710
This is a declaration of an array, and

51
03:57.820 --> 04:06.770
along with this I can also initialize it like 2 4 6 8 10 . So, array will be created and it will be already

52
04:06.770 --> 04:07.890
filled with the values.

53
04:07.930 --> 04:16.860
Like suppose an array B is created inside the stack then it will be filled with the values 2 4 6 8 10.

54
04:16.900 --> 04:21.230
So this is declaration of an array,

55
04:21.290 --> 04:27.290
this portion, and, this is initialization of the array. Together I can do. This is just declaration and

56
04:27.290 --> 04:30.260
this is the declaration as well as initialization.

57
04:30.260 --> 04:36.410
Now, next thing is how to access an Array. For accessing an Array, we can access all the elements one by one.

58
04:36.410 --> 04:36.620
.

59
04:36.630 --> 04:40.490
Suppose I want to print all of them, then I can use a for loop.

60
04:40.580 --> 04:42.400
So for that I would take one variable.

61
04:42.440 --> 04:44.950
I am using for loop for

62
04:44.990 --> 04:52.360
integer i = 0, i < 5, i++ . Then, using printf, I can print it.

63
04:52.610 --> 04:55.630
So,

64
04:56.540 --> 04:58.840
printf ( " %d ", B[i] ) ;

65
04:59.930 --> 05:03.760
You must be familiar with the for loop.

66
05:03.850 --> 05:07.450
So, i = 0, i < 5, i++.

67
05:07.450 --> 05:09.710
So, initially, i will be zero.

68
05:09.790 --> 05:11.770
Then it checks whether I is less than 5.

69
05:11.810 --> 05:14.620
Then it will bring this, B[0].

70
05:14.680 --> 05:20.560
So it will be B[0]; B[0] the element will be printed. Then, next time i++, i becomes 1.

71
05:20.560 --> 05:28.630
1 is less than  5, so it will print B[1] and so on up to B[4] it will print all elements.

72
05:28.630 --> 05:33.990
So for loop is used for scanning through the list of elements in an array.

73
05:34.120 --> 05:38.550
More frequently we use for loop for accessing all the elements of an array.

74
05:38.590 --> 05:39.130
So that's it.

75
05:39.160 --> 05:44.290
This is sufficient because we have a very big topic called arrays and we will be learning lots and

76
05:44.290 --> 05:48.490
lots of things about arrays; Just as an introduction, as a revision,

77
05:48.490 --> 05:49.450
I have done it.

78
05:49.450 --> 05:50.150
So that's it.

79
05:50.170 --> 05:51.510
About an Array.

80
05:51.700 --> 05:55.020
So, the points that I have discussed, let me put them together.

81
05:55.150 --> 06:01.000
I have explained you what does it mean by an array and how to declare and initialize it and when it is 

82
06:01.000 --> 06:05.850
declared inside a function then where it will appear inside the main memory.

83
06:05.860 --> 06:10.630
This is sufficient for us now because we have lot of things to learn about array.

84
06:10.630 --> 06:13.130
There is a big section called arrays.

85
06:13.150 --> 06:15.490
So there you will learn everything about arrays.

86
06:15.940 --> 06:20.230
So, as a revision, I have discussed this much, that is sufficient.

87
06:20.230 --> 06:22.160
We have to learn about other topics.

88
06:22.240 --> 06:23.440
Let us continue in other video.