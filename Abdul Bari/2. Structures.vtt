WEBVTT

0
00:00.330 --> 00:06.060
In this video we will learn about Structures. Structure can be defined as a collection of data members

1
00:06.120 --> 00:12.000
that are related data members under one name; and those data members may be of similar type, maybe of 

2
00:12.000 --> 00:12.790
dissimilar type.

3
00:12.890 --> 00:19.950
So usually it is defined as a collection of dissimilar data items under one name; that is grouping the

4
00:19.960 --> 00:21.220
data items.

5
00:21.450 --> 00:26.940
Structure is used for defining user defined data types. Apart from the primitive data types,

6
00:26.940 --> 00:31.850
What we have in any programming language, like C language, we have primitive data types, like integer, float, 

7
00:31.850 --> 00:39.410
double so on, using these primitives we can define our own data type depending on our requirement.

8
00:39.450 --> 00:43.620
So this is structure I am using more frequently in my course.

9
00:43.620 --> 00:49.080
So in this video we will learn how to define the structure and what does it mean by the size of a structure,

10
00:49.140 --> 00:55.890
like how much memory it consumes then building a structure then accessing the members of a structure.

11
00:56.460 --> 00:58.540
Let us learn about these things one by one.

12
00:59.310 --> 01:08.310
Let us take an example of a rectangle. A rectangular figure will have properties like length and breadth.

13
01:08.400 --> 01:16.550
So it will have length and breadth, these two things together defines a rectangle.

14
01:17.330 --> 01:23.030
So if in your programs you need something like a rectangle then you can define the structure for it

15
01:23.060 --> 01:26.390
because a rectangle is not defined by just one value,

16
01:26.390 --> 01:28.970
It is defined by a set of values.

17
01:29.000 --> 01:34.610
So that is length and breadth so you can group them together under one name and define it as a structure.

18
01:34.610 --> 01:36.440
For example a rectangle.

19
01:36.440 --> 01:39.680
So, here I define, struct rectangle

20
01:43.950 --> 01:49.200
now, inside this, I will take integer type length, and integer type breadth

21
01:49.210 --> 01:53.670
Now this is having two members that are length and breadth.

22
01:53.970 --> 01:55.770
I'm picking them as integer type.

23
01:55.920 --> 02:00.720
If you want you can take them as float or double any type depending on your requirement.

24
02:00.720 --> 02:05.660
I'm assuming that these are simple values which are integral type, no decimals are there.

25
02:05.890 --> 02:11.400
So structure rectangle is defined by its length and breadth; These two members together are defining

26
02:11.400 --> 02:12.100
a rectangle.

27
02:12.480 --> 02:15.360
So this is the definition of a structure.

28
02:16.050 --> 02:17.810
I have taken an example of rectangle.

29
02:17.820 --> 02:20.880
I'll be showing you more examples upon structures later on.

30
02:21.630 --> 02:24.430
So let us learn further about this one.

31
02:24.570 --> 02:27.800
Now how much memory this rectangle will be consuming?

32
02:27.850 --> 02:31.270
See it is having two members this land integer type.

33
02:31.380 --> 02:37.590
If I assume integer takes 2 bytes, or it may take 4 bytes but, I'm assuming it has 2 bytes. Now, breadth

34
02:37.590 --> 02:44.670
also takes 2 bytes, total it is 4 bytes of memory. So, this structure is taking 4 bytes

35
02:44.670 --> 02:45.160
of memory.

36
02:45.180 --> 02:48.940
Right now it's not consuming any memory because it is just our definition.

37
02:48.960 --> 02:54.740
So if I create a variable of this type then it will be occupying that much memory.

38
02:54.880 --> 02:56.580
Now we have seen how do we define.

39
02:56.580 --> 03:01.710
We have learned how to know its size. The size of a structure is the total amount of memory consumed

40
03:01.710 --> 03:04.220
by all its members.

41
03:04.260 --> 03:08.190
Now next let us learn how to declare a variable of that type structure.

42
03:08.610 --> 03:13.920
So inside the main ( ) , I will write down main ( ). Now, inside the mean ( ) ,

43
03:13.950 --> 03:17.640
If I declare a variable, so the method of declaration is write,

44
03:17.640 --> 03:22.110
Struct as a keyword then give the name rectangle.

45
03:22.410 --> 03:24.930
Then I'll give the name as r.

46
03:25.320 --> 03:26.220
Rectangle r.

47
03:26.730 --> 03:28.330
This is a declaration.

48
03:28.350 --> 03:32.200
Now, this r will occupy the memory space, right.

49
03:32.280 --> 03:33.930
This will be created in the memory.

50
03:34.030 --> 03:39.840
So, how it looks like? like r is of type triangle, so it is having 2 members that is length and breadth, so

51
03:39.960 --> 03:46.700
r will occupy a total of 4 bytes, and first 2 bytes are for length and next 2 bytes are for breadth.

52
03:47.340 --> 03:50.290
So yes that is occupying memory.

53
03:50.400 --> 03:52.410
This is a method of declaration.

54
03:52.600 --> 04:00.070
Now, if suppose, I want to initialize it, then I can declare and simultaneously I can initialize it.

55
04:00.120 --> 04:06.640
So let us say, struct, I will rewrite the same thing, I will say rectangle.

56
04:07.010 --> 04:12.390
I'll use the same name r with values, I can say 10 , 5 .

57
04:12.420 --> 04:16.740
So, length is 10 and breadth is 5, so, 10 and 5 will be filled in this one.

58
04:17.820 --> 04:20.660
So this is how we can declare as well as initialize

59
04:20.700 --> 04:21.470
.

60
04:21.600 --> 04:27.990
This is just a declaration, right; and this is declaration plus initialization, together.

61
04:27.990 --> 04:30.720
This is a declaration plus initialization

62
04:33.130 --> 04:37.520
then, inside the main memory, if you want to see where this r is created,

63
04:37.550 --> 04:43.450
So it is created inside the stack for the main ( ) , is it inside the stack frame of main ( ) .

64
04:43.580 --> 04:48.020
So r will be having length and breadth, this is length and breadth,

65
04:48.190 --> 04:49.730
And this is 10 and 5.

66
04:49.800 --> 04:51.460
So I'm showing them side by side.

67
04:53.410 --> 04:55.350
So we have learned definition,

68
04:55.360 --> 05:01.750
declaration and initialization. Now, how to access the members of the structure? Suppose, I want to access

69
05:01.750 --> 05:02.500
this length.,

70
05:02.500 --> 05:09.430
I want to modify it to 15. So, for accessing the members of a structure we should use structure variable name

71
05:09.790 --> 05:11.290
and dot length.

72
05:11.530 --> 05:20.170
So this is length = 15, so this value will be changed to 15, right; so, it is change to 15 in the memory.

73
05:20.170 --> 05:21.950
So this is how we can access,

74
05:21.950 --> 05:27.940
So what is the operator we use for accessing a member? dot operator is used for accessing a member. Then, r . breadth ,

75
05:27.980 --> 05:32.900
I can modify it, r . breadth = 10 .

76
05:33.020 --> 05:39.430
So this is modified to 10. So, if you want to read or write the members of a structure dot operator is

77
05:39.430 --> 05:45.360
used. Here I will calculate the area of a rectangle and show you, so directly I will print that as 

78
05:45.440 --> 05:50.740
printf (" Area of Rectangle is %d",

79
05:54.350 --> 05:56.540
printf ("Area of Rectangle is %d",

80
05:56.540 --> 05:58.740
So here, I will write the formula.

81
05:58.760 --> 06:01.750
So, what is the formula for area? length*breadth .

82
06:01.880 --> 06:08.570
So how to access that length and breadth? I have to use the dot operator. So, say,

83
06:08.570 --> 06:11.950
r . length * r . breadth

84
06:12.150 --> 06:18.410
So this is how I can access the members. So, length and breadth will be multiplied, that is 15 * 10

85
06:18.420 --> 06:21.390
and I get the result is 150. So, that's it

86
06:21.390 --> 06:25.620
about the structure, this is sufficient and more about the structures, I will discuss when I talk about

87
06:25.980 --> 06:27.890
pointers and functions.

88
06:27.900 --> 06:30.360
So this was just the introduction to structure.

89
06:31.040 --> 06:34.070
So let us continue with other topics in the next videos.

90
06:34.130 --> 06:39.270
So that's it. We have learnt about how to define, how to declare and how to access the members and where it is created

91
06:39.290 --> 06:43.500
in the memory when you are directly creating or declaring it inside the main ( ) . 

92
06:43.600 --> 06:49.190
declaration and initialization is like this when it is done. So, it's inside the stack frame of that particular

93
06:49.190 --> 06:50.360
function.

94
06:50.370 --> 06:56.000
Now I will give you a few more examples of structure. So, I will write down few more structures to give you the idea

95
06:56.270 --> 07:01.230
how or where we can use structures. Let us look at the example,

96
07:01.250 --> 07:08.940
So the first example I will write a complex number.
So complex number in mathematics is defined

97
07:08.940 --> 07:14.060
in terms of a + ib , where i is an imaginary number.

98
07:14.090 --> 07:17.040
So, two real numbers are a and b.

99
07:17.060 --> 07:19.850
where, i is defined as root of -1.

100
07:20.270 --> 07:24.530
So if you are familiar with the complex number then you can understand this, otherwise, just you can Google

101
07:24.530 --> 07:30.770
it and find out what a complex number is. So, complex number is defined in terms of a + ib

102
07:30.800 --> 07:36.310
So we need two members A and B. So, complex number is defined in terms of two elements.

103
07:36.410 --> 07:39.050
So that you can group them and define this structure.

104
07:39.080 --> 07:47.700
So here we can define it as structure, struct complex , and inside, that we can have two members.

105
07:47.700 --> 07:50.840
One is a, or I can call it as real part.

106
07:51.000 --> 07:59.380
And second one is imaginary, I can name it as b or also I can call it as imaginary that is img .

107
07:59.400 --> 08:01.240
This is our definition.

108
08:01.320 --> 08:05.790
Now you can define a complex number like this and you can create the variables of complex numbers and

109
08:05.790 --> 08:13.740
you can use them in your program. if you need this complex number. Now, second example I will take an example

110
08:13.740 --> 08:14.570
of a student,

111
08:14.580 --> 08:17.980
Suppose your program is dealing with students' information.

112
08:18.160 --> 08:25.810
So for a student we can define a structure structure for us to then make and then the details of a student.

113
08:25.830 --> 08:29.230
So let us say I want to store the roll number of a student.

114
08:29.340 --> 08:31.670
And suppose a  roll number is integer type.

115
08:31.740 --> 08:34.710
Next I want to store the name of a student.

116
08:34.770 --> 08:36.660
So name of a student is a string.

117
08:36.660 --> 08:40.890
So I will have an array of type character for name.

118
08:40.890 --> 08:47.520
Let us reserve 25 spaces, so it can store a name up to 25 characters.

119
08:47.520 --> 08:52.360
Next thing, I want to store department of students, so department is also a name.

120
08:52.440 --> 08:54.000
So it's a character type.

121
08:54.000 --> 09:01.710
Let us give the name of size 10, like computer science or mechanical engineering or anything you can

122
09:01.710 --> 09:04.150
give a short form of the department name.

123
09:04.290 --> 09:07.680
Next, I want to store the address of a student, so address,

124
09:07.680 --> 09:14.500
I can take it as, of some size, let us say, 50 bytes, right.

125
09:15.050 --> 09:20.870
So I think it is sufficient. If you want to add, you can add many things, like the phone number of a student,

126
09:20.870 --> 09:25.790
and email address of a student, Date of Birth of a student, a lot of things you can add, so that all together

127
09:25.790 --> 09:31.070
forms a single student structure. And when you declare a variable you get all these things together

128
09:31.520 --> 09:35.300
and you can access each of them individually using dot operator.

129
09:35.870 --> 09:38.310
So this is another idea of a structure.

130
09:38.370 --> 09:43.570
Now if I calculate the amount of memory it is taking, like if I said this is 2 bytes and 2 bytes,

131
09:43.580 --> 09:49.670
So this is taking total 4 bytes, and if I take this one, this is integer, taking 2 bytes.

132
09:49.700 --> 09:55.550
So this is character type, 25 characters take 25 bytes because character takes just 1 byte

133
09:55.970 --> 09:57.300
and this 10 bytes,

134
09:57.380 --> 09:58.850
and this is 50 bytes,

135
09:58.910 --> 10:01.640
So this is total 77.

136
10:01.640 --> 10:05.430
So this is taking 77 bytes.

137
10:05.560 --> 10:07.630
So this is another example.

138
10:07.630 --> 10:13.530
This is just for a student, you can define it for an employee so you can have employee id, employee name,

139
10:13.680 --> 10:19.260
employee department, employee address, employee phone number, so on. Then, if you want to define a structure 

140
10:19.260 --> 10:26.720
for a book, you can give book title, book author name, book version or edition, then year of publication and so on.

141
10:26.840 --> 10:33.150
So, you can have all the members. So, a lot of data you can combine together under one name and when you

142
10:33.150 --> 10:36.220
declare a variable of type student, suppose, for example for this,

143
10:36.240 --> 10:46.320
If I do further, then this is a variable I am declaring, struct student s . So, I can say, s . roll

144
10:46.680 --> 10:54.600
I can set the roll number. Let us say roll number is 10, then I can say s . name and I can assign

145
10:54.740 --> 11:02.410
some name. Like this, I can access all members. This is just for one student. So, similarly we can have

146
11:02.410 --> 11:08.860
for various students and we can deal with their information in our program. So,

147
11:08.860 --> 11:11.560
One more example for a structure I will take and show you.

148
11:12.800 --> 11:20.030
So next example I take an example for playing cards. A deck of playing cards will have some properties.

149
11:20.040 --> 11:21.580
It will have a face value.

150
11:21.660 --> 11:24.960
Let us say kings of hearts.

151
11:24.960 --> 11:26.220
So there is a face value.

152
11:26.220 --> 11:32.670
And this will have color, that is a red color and also shape is hearts. Any playing card can be defined

153
11:32.670 --> 11:40.200
in terms of three properties. First is, face value, then face value can start from 1 onwards. 1 means,

154
11:40.230 --> 11:50.030
let us call it as ACE, so, ACE, then 2, 3, 4, 5, . . . .  10 . then a J is 11, and Queen is 12 

155
11:50.130 --> 11:51.610
and King as 13.

156
11:51.750 --> 11:57.080
So these are the face value from 1 to 13. Then, next is shapes are there.

157
11:57.480 --> 11:58.810
So what are the shapes?

158
11:58.860 --> 12:06.640
There are 4 shapes, like Hearts, Diamonds, Spades, and Club. So, 4 shapes are there.

159
12:06.660 --> 12:12.000
So let us define the shapes in terms of codes. We will give code
for them.

160
12:12.000 --> 12:13.470
Let us say 0,

161
12:13.530 --> 12:14.450
is for club.

162
12:14.700 --> 12:18.130
So this club will be like this, right.

163
12:18.480 --> 12:20.300
And 1 is for spade.

164
12:20.550 --> 12:22.720
So this is Spade.

165
12:22.790 --> 12:26.930
Alright, then, 3 is for diamond.

166
12:26.970 --> 12:30.630
Let us take it as Diamond, and 4 is for hearts.

167
12:30.690 --> 12:34.320
So let us define these as shapes. So for each shape,

168
12:34.350 --> 12:37.970
I have given a number. Now, next thing is color.

169
12:38.190 --> 12:42.840
So as there are only two colors, I will define colors also in terms of codes.

170
12:42.840 --> 12:48.390
Let us say 0 for black color and 1 for red color.

171
12:48.720 --> 12:50.570
So 1 for the red color.

172
12:50.770 --> 12:52.570
So black and red color.

173
12:52.650 --> 13:00.420
So this is how we can define a playing card. Now ,this I can represent it as a structure. Let us define a

174
13:00.420 --> 13:07.660
structure; struct card ;  What are the members?

175
13:07.660 --> 13:13.290
All these are integers only now. First one is

176
13:13.300 --> 13:21.250
is int face ; and the second one is int shape ; and the third one is int color

177
13:21.250 --> 13:21.950
int color

178
13:25.380 --> 13:27.200
this is how we can define a playing card.

179
13:27.450 --> 13:30.300
So this is the definition. Then, how much space is it taking?

180
13:30.300 --> 13:37.140
Suppose, if I say, int type is taking 2 bytes, so total 6 bytes of memory it is taking. This is just our definition

181
13:37.140 --> 13:38.420
of a card.

182
13:38.600 --> 13:44.850
Now let us declare a variable. So, inside main ( ) , if I declare a variable of this type of

183
13:44.850 --> 13:53.700
structure, so I can have a playing card, struct card c . This c, how it will occupy the memory?

184
13:53.970 --> 14:00.120
it will have three members, first one is a face, and the second one is shape, right?

185
14:00.480 --> 14:06.260
And the third one is color. Now you can access all these members by using a dot operator, I can say, 

186
14:06.270 --> 14:14.190
c . face = 1 , next, c . shape = 0.

187
14:14.250 --> 14:20.480
So this is for club. Now, c . color = 0 . This is black color definitely.

188
14:20.490 --> 14:21.350
So this is 0 .

189
14:22.020 --> 14:27.630
So this how I can create a variable of datatype structure, and I can initialize its member. So, this will be

190
14:27.630 --> 14:32.980
1 0 0 . So, you can see that I am using dot operator.

191
14:33.100 --> 14:35.370
Otherwise; Let us forget this.

192
14:35.590 --> 14:43.870
Otherwise I can directly initialize also. struct card c , I can directly initialize the value, that is

193
14:43.870 --> 14:47.800
first, face value is 1 , and then, shape is 0 , and the color is also 0.

194
14:48.310 --> 14:56.950
So, this is declaration plus initialization. And, inside the memory it will be here, like c will have 3 members,

195
14:56.950 --> 15:08.640
1 0 0 0 . It will be inside the stack, that is belonging to main ( ) , or the stack frame belonging

196
15:08.640 --> 15:09.480
to the main ( ) .

197
15:10.640 --> 15:13.560
Now, one more thing, I'll just remove this and show you one more thing.

198
15:15.280 --> 15:24.230
See, inside the main ( ) , I want to have a deck of cards, so, total there will be 52 cards.

199
15:24.250 --> 15:26.080
This is the definition of a card.

200
15:26.110 --> 15:27.470
So just for one card.

201
15:27.800 --> 15:32.950
Likewise I want 52 cards so I can declare a variable,

202
15:33.010 --> 15:34.110
struct card ,

203
15:34.150 --> 15:37.380
Now, this is the structure name, and now variable name,

204
15:37.390 --> 15:46.100
I will call it as deck of size 52. This will form an array of structures.

205
15:46.100 --> 15:47.020
This is important.

206
15:47.490 --> 15:55.190
Array of structures. so I'll be having 52 such structures. So, one structure is taking 6 bytes,

207
15:55.530 --> 16:05.850
Total how many bytes will it take? It will be taking, 52 * 6 bytes. So, 312 bytes it

208
16:05.850 --> 16:06.480
will take.

209
16:06.630 --> 16:10.200
So I'll get 52 different cards. Now,

210
16:10.260 --> 16:13.980
Each card I can access it with the help of its index.

211
16:14.430 --> 16:19.240
Even I can initialize this array of structures.

212
16:19.380 --> 16:29.400
So if I want to initialize it, for a few cards I will do. First one, first card is ACE of club

213
16:29.880 --> 16:31.210
and black color.

214
16:31.230 --> 16:36.600
This is first card then second, that is card 2, face value is 2,

215
16:36.690 --> 16:43.800
and this is club and color is 0 , so on. I can fill this one. Now, afterwards, if suppose I want to start

216
16:43.800 --> 16:47.940
filling the other colors, or, other shapes like 

217
16:48.290 --> 16:56.250
ACE of spade and the color is 0, right. Then card value is 2 and it is a spade.

218
16:56.250 --> 16:58.970
So next is color is 0.

219
16:59.370 --> 17:02.960
So this is face value and this is shape and this is color.

220
17:03.240 --> 17:07.290
So like this I can fill up all 52 cards if I want to initialize them.

221
17:08.620 --> 17:11.160
So we can initialize an array of structures like this.

222
17:11.160 --> 17:14.120
This is the first structure, and second structure and so on.

223
17:14.500 --> 17:21.010
So in this way we can initialize array of structures if I want to access them individually, like the

224
17:21.010 --> 17:24.750
first card I want to display, then I can use dot operator.

225
17:24.910 --> 17:34.970
So let us print just a face value of first card, printf ("%d", deck[0] . face )

226
17:35.200 --> 17:45.880
That is the second, so it will show face of the first card then,

227
17:47.200 --> 17:55.800
printf ("%d", deck[0] . shape ) So, I can display shape.

228
17:56.010 --> 17:58.800
That's it. I can display other things also, like color also

229
17:58.800 --> 18:03.760
I can display. So, this how by using array name, then index,

230
18:03.760 --> 18:04.840
Then I can access it.

231
18:04.840 --> 18:06.300
So here we have learned,

232
18:06.760 --> 18:08.270
How do you find a structure.,

233
18:08.320 --> 18:14.470
How to declare an array of structure, and how to initialize, if you want to initialize then, how to access

234
18:14.470 --> 18:15.130
of the members.

235
18:15.670 --> 18:18.410
So this I'll be giving a demonstration also.

236
18:18.430 --> 18:23.200
This is sufficient right now for the structure. More about structures, that is pointer to a structure

237
18:23.200 --> 18:26.840
and the parameter of the structure, we will be learning them in coming videos.