WEBVTT

0
00:00.360 --> 00:04.770
In this video, we'll learn about pointer to a structure. Pointer, that we have already studied.

1
00:04.770 --> 00:08.020
Now, let us see how to have a pointer upon a structure.

2
00:08.430 --> 00:13.960
So, already we have seen this example of rectangle structure having members length and breadth.

3
00:14.300 --> 00:14.720
Now,

4
00:15.030 --> 00:19.960
Inside the main ( ) function, I have a rectangle variable r and it is initialized with length 10 and breadth 5. 

5
00:19.980 --> 00:26.810
So this variable occupies memory and it will have the values 10 and 5. Now, if I want I can directly

6
00:26.820 --> 00:30.970
access these members length and breadth by using variable name r.

7
00:31.440 --> 00:39.300
So if I want to print or I want to change, so I can say r . length = 15; I can change it like this

8
00:39.300 --> 00:40.800
I can change it like this.

9
00:40.800 --> 00:43.740
But let us learn now, how to access it with a pointer.

10
00:43.770 --> 00:51.340
So first of all, I will declare a pointer. struct rectangle pointer

11
00:51.450 --> 00:57.210
So I'll give the point in the as p. Now, first thing,

12
00:57.370 --> 00:59.630
How much memory rectangle consumes?

13
00:59.680 --> 01:01.200
As you know, this takes 2 bytes,

14
01:01.210 --> 01:05.310
We are assuming integer is taking 2 bytes. So, this is total 4 bytes.

15
01:05.470 --> 01:08.120
Then how much memory p takes?

16
01:08.200 --> 01:09.430
It takes just two bytes,

17
01:10.060 --> 01:15.940
Every pointer, whatever the type it maybe, Pointer takes 2 bytes. Actually, it takes equal to the size of the

18
01:15.950 --> 01:17.770
integer in any compiler.

19
01:17.770 --> 01:21.440
If an integer takes 2 bytes in the compiler, pointer also takes 2 bytes.

20
01:21.490 --> 01:24.280
If an integer takes 4 bytes, it will also take 4 bytes.

21
01:24.280 --> 01:28.230
So whatever the size of integer it maybe, it is also same.

22
01:28.360 --> 01:33.870
So let us assume 2 bytes. So, pointer doesn't take all 4 bytes, it will not have length and breadth,

23
01:34.210 --> 01:39.940
Let me show you a pointer diagrammatically. So, just like a simple variable.

24
01:40.090 --> 01:47.570
Now, I want to assign the address of this r. So, this pointer could be pointing on this variable.

25
01:48.640 --> 01:51.840
This is initialized; declared and initialized.

26
01:51.920 --> 01:58.230
Now I want to access these members using that pointer. So how I can do that?

27
01:58.270 --> 02:00.750
I want to modify length to 20 suppose. So,

28
02:00.850 --> 02:06.380
Can I say, p . length = 20?

29
02:06.540 --> 02:07.340
No.

30
02:07.450 --> 02:12.510
p is a pointer, it's not a variable, it's not having members. Then,

31
02:12.730 --> 02:19.230
Do what? I have to come here, then I can access these members, so go to the place where the pointer is pointing,

32
02:19.240 --> 02:23.140
suppose, the starting address is 200, then it is having address 200.

33
02:23.160 --> 02:25.460
So go to address 200, and then access data.

34
02:25.550 --> 02:32.910
So okay, I should write * , okay I wrote *, but this is wrong because the higher precedence is

35
02:32.930 --> 02:37.560
for dot operator so first it will take it as p . length, so again it is wrong.

36
02:37.660 --> 02:39.940
So I should enclose this inside the bracket.

37
02:40.300 --> 02:46.060
So this should be inside the bracket, and then '.' Oh, so much I have to write down for accessing that

38
02:46.060 --> 02:46.550
member.

39
02:46.810 --> 02:53.030
So, instead of following this syntax, C language gives a simple syntax for accessing the members using pointer

40
02:53.060 --> 02:59.690
So, I can simply say, p -> length = 20;

41
02:59.980 --> 03:03.930
So either we can use this or we can use this.

42
03:03.970 --> 03:09.000
So finally, for a normal variable, use dot operator,

43
03:09.000 --> 03:14.840
This Dot operator and for pointer variable, use p ->

44
03:14.960 --> 03:16.830
right? Instead of dot

45
03:16.930 --> 03:17.590
We have ->

46
03:18.760 --> 03:24.640
So this is the method of accessing a structure using pointer.

47
03:24.670 --> 03:25.760
Arrow is used.

48
03:26.540 --> 03:28.560
Now next, one more thing I will do.

49
03:28.600 --> 03:35.350
I will create an object dynamically in heap using pointer. So I will create an object or a variable

50
03:35.350 --> 03:40.510
of type rectangle, dynamically. So, I'll remove this and I will write down the code.

51
03:42.170 --> 03:44.750
Now, let us see how to create it dynamically.

52
03:44.750 --> 03:50.870
So for that, first of all I need a pointer. So, I will take a pointer of type structure, struct rectangle

53
03:51.740 --> 03:52.760
and a pointer.

54
03:53.180 --> 03:55.850
So I'm using p for pointer.

55
03:55.940 --> 03:57.740
So this p is a pointer.

56
03:57.740 --> 04:02.990
So, this will be created inside the stack. Now, already you are familiar, when you declare the variables,

57
04:03.020 --> 04:08.420
that are created inside the stack, as a part of code activation record of the function.

58
04:08.450 --> 04:09.660
So yes it's a variable,

59
04:09.680 --> 04:10.840
So it's inside the stack.

60
04:11.380 --> 04:16.550
Now we want a variable of type structure, object of type structure in heap.

61
04:16.550 --> 04:19.570
So how to get the memory and heap? malloc ( ) function.

62
04:19.580 --> 04:20.400
Yes.

63
04:20.510 --> 04:22.610
So I should call malloc ( ) function

64
04:22.700 --> 04:30.320
Yes malloc ( ) function. Then, I must give the number of bytes that are required. So, actually it is same as

65
04:30.320 --> 04:39.500
this structure size. So, I can mention 4, or else I can say sizeof ( struct rectangle )

66
04:39.950 --> 04:48.300
So rectangle structure is taken, right.Then, this allocates the memory.

67
04:48.320 --> 04:55.930
Now we have to type-cast it, because the malloc ( ) function returns void pointer, right. So,void pointer means

68
04:55.940 --> 04:58.630
it's a generic pointer so I have to typecast it.

69
04:58.730 --> 05:05.380
So for typecasting, I should write down here, stuct rectangle *

70
05:05.720 --> 05:12.570
So I'm typecasting it as a rectangle type structure pointer, then assign it to p.

71
05:12.710 --> 05:16.390
This is how we can allocate object of type

72
05:16.390 --> 05:22.840
rectangle in heap. So, this will be created in heap and it will be having length and breadth, and the pointer

73
05:22.850 --> 05:24.930
will be pointing on that one.

74
05:25.580 --> 05:26.370
This is the method.

75
05:27.020 --> 05:36.140
Then, I want to access the member so I can use -> operator, So,
p -> length = 10 ; and

76
05:36.170 --> 05:39.840
p -> breadth = 5 ;

77
05:40.670 --> 05:42.900
So this is how I can assign length and breadth.

78
05:43.580 --> 05:44.530
So this will be 10,

79
05:44.570 --> 05:47.580
And this will be 5. That's all.

80
05:48.210 --> 05:50.390
So, more if you want, you can write down.

81
05:50.480 --> 05:57.380
I have to show you how to create a variable of type structure in heap by using malloc ( ) function.

82
05:57.380 --> 06:00.760
So that's all about a pointer to a structure.

83
06:01.070 --> 06:05.560
So, in the previous example I have shown you, an existing variable to the pointer was pointing there,

84
06:05.900 --> 06:12.800
But now, this is a dynamic object created in heap and the pointer is pointing there. So that was static object

85
06:12.800 --> 06:15.640
and this is dynamic object.

86
06:15.680 --> 06:17.440
That's all about Pointer to Structure.