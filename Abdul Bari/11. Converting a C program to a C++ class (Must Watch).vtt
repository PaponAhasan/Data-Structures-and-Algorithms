WEBVTT

00:00.690 --> 00:06.630
In this video we learn about glasses and constructors in C++.

00:06.630 --> 00:12.340
So I'm going to discuss the concept that are useful in the course I'm using just glasses in the constructor.

00:12.480 --> 00:14.690
Not all the features of object orientation.

00:14.700 --> 00:18.730
So I would be discussing everything about roots see here.

00:18.740 --> 00:23.250
I'm going to transform C language code to C++ code.

00:23.490 --> 00:27.060
So we have already seen this in the previous week of this example.

00:27.060 --> 00:31.290
So if you have not seen that video I'd suggest you to watch that video.

00:31.290 --> 00:33.990
This is the best of style of coding in C language.

00:34.020 --> 00:41.430
I have explained in the previous video No I'm going to transform this into C++ code that is using class

00:41.550 --> 00:44.040
and also including constructor.

00:44.130 --> 00:46.500
So let me show you how to do this before dark.

00:46.500 --> 00:50.780
Quickly I will go through this example once again and then I will transform it.

00:50.970 --> 00:51.590
See here.

00:51.630 --> 00:54.140
I have a structure called a rectangle.

00:54.200 --> 01:00.260
This is having Lenton trapped inside the main function I'm creating or deleting a variable of type rectangle.

01:00.960 --> 01:04.740
And then inside the main function if you'll see there is no processing in war.

01:04.770 --> 01:07.230
There are no operations just function calls all day.

01:07.770 --> 01:12.810
So the function call is for initializing a rectangle and finding the area of a rectangle and changing

01:12.810 --> 01:13.390
its length.

01:14.010 --> 01:19.170
And all these functions and passing rectangles about I mean like initialize function is setting the

01:19.170 --> 01:26.330
length and breadth so it is sticking by different item and taking land and that area is taking a rectangle

01:26.700 --> 01:33.150
change land is sticking a rectangle by address again and it is changing lent by taking new land.

01:33.750 --> 01:34.720
So these are the function.

01:34.740 --> 01:41.010
So if you see those functions these functions are defined here and all these functions are related to

01:41.180 --> 01:42.200
correct.

01:42.880 --> 01:46.460
Now this is the best style of coding in C language.

01:46.560 --> 01:52.710
So this I have adopted in my course then I have also shown that the places Holder transform this into

01:53.100 --> 02:01.620
C++ so that's style I'm discussing don't let us convert it to C++ code so watch it very carefully.

02:01.630 --> 02:05.920
See this is a structure I will call it as a class.

02:05.980 --> 02:07.290
Class rectangle

02:09.890 --> 02:12.710
structure is converted to a class.

02:13.060 --> 02:19.370
Then this function Initialize ADR change limp.

02:19.480 --> 02:24.970
All these functions are made to form that structure only a list or the structure of the meant for that

02:24.970 --> 02:27.560
structure only if that structure is not there.

02:27.760 --> 02:32.390
There is no use of dysfunction see the sticking rectangle it's stigmatized and it's sticking there.

02:33.520 --> 02:40.360
So now the question is why that old site include them inside the class.

02:40.360 --> 02:41.850
So my class ends here.

02:43.030 --> 02:45.780
So the class starts from here and ends here.

02:45.790 --> 02:50.670
So now the class contains Biederman books as well as functions.

02:50.980 --> 02:56.320
So these functions have been given part of the class not C I'm modifying it I'm discussing and modifying

02:56.320 --> 02:56.410
it.

02:56.430 --> 02:58.310
What you're trying to get from me.

02:58.330 --> 03:00.510
The style is different here.

03:00.510 --> 03:01.750
Next.

03:01.860 --> 03:04.270
This is a member of a colossally.

03:04.560 --> 03:08.220
Why does it have to be this rectangular as an argument.

03:08.210 --> 03:12.150
I remove this then just take left.

03:12.580 --> 03:15.710
I'm Brett too bad.

03:15.710 --> 03:19.410
I make less then this also.

03:19.410 --> 03:20.420
I remove this one.

03:20.420 --> 03:22.280
It's a part of a standalone.

03:22.670 --> 03:26.830
Just write nothing because it doesn't have to take anything rectangle.

03:27.040 --> 03:30.440
It's got to be accessible Levitan pathetically accessible.

03:30.530 --> 03:33.320
Then challenge of this also became a part of it.

03:33.340 --> 03:37.160
No need of taking this rectangle has a bottom and only lent is required.

03:37.190 --> 03:40.410
So just declare lent as an argument.

03:41.230 --> 03:43.590
So I have made one change now.

03:43.600 --> 03:44.600
Few more changes.

03:44.600 --> 03:46.620
Again I do it for all the functions.

03:46.700 --> 03:52.970
See this land and the bird are identically accessible so no need off this variable limb.

03:53.060 --> 03:55.320
Just learn to sign them at the side B.

03:55.520 --> 04:00.640
Now here left them both identically accessible and only enough are here because I have removed the bottom

04:00.700 --> 04:02.010
to remove the bottom.

04:02.020 --> 04:05.680
There are no heroes so no need of I have removed the barometer.

04:05.900 --> 04:10.980
It doesn't get ugly as a single lint that's it.

04:11.000 --> 04:16.300
So this is initialize function or ADR function and change in function.

04:16.310 --> 04:18.630
This has became a C++ class.

04:18.720 --> 04:20.560
What we do inside our classes.

04:20.570 --> 04:25.210
When you have the data members we declared a state of invert size private.

04:25.340 --> 04:26.670
We declare that mass private.

04:27.150 --> 04:34.020
And we make these functions as public because who are accessing these numbers.

04:34.050 --> 04:35.560
So many functions are there.

04:35.580 --> 04:37.590
Why do you need that data to be public.

04:37.590 --> 04:39.190
So let us hide it.

04:39.210 --> 04:42.060
Everything should be accessible using these functions.

04:42.120 --> 04:43.930
So now of this has become a class.

04:43.980 --> 04:46.560
Now how it will affect inside the main function.

04:46.590 --> 04:47.770
I will show that one.

04:47.820 --> 04:54.930
Then again I will come back inside the main function I have created a variable of type rectangle structure.

04:54.990 --> 04:59.440
So now I will change it and I will simply say rectangle.

04:59.880 --> 05:00.610
OK.

05:01.240 --> 05:06.800
Now we call this as a object and stuff a variable we call it as an object.

05:06.900 --> 05:12.980
That how because these functions these functions are present inside the rectangle only.

05:13.050 --> 05:20.130
So for calling these functions in stock passing the parameter I should say on a dot initialize then

05:20.130 --> 05:21.880
Boston Common 5.

05:22.400 --> 05:26.490
I remove this one then called the size on a dot area.

05:26.490 --> 05:27.560
Remove this one.

05:27.780 --> 05:30.580
Then God decides on a dark change lint.

05:30.660 --> 05:32.850
Remove this one and just pass.

05:32.970 --> 05:33.530
Lindy.

05:34.830 --> 05:42.030
Now you can see that earlier initialize function was taking a rectangle as part of my door now initialize

05:42.030 --> 05:49.420
function itself as a part of rectangle so this is an object and these are the functions member functions

05:49.420 --> 05:50.500
of that object.

05:50.530 --> 05:56.380
So once you create a rectangle one of the things you get you get lent and Brett These are the good I'm

05:56.390 --> 06:01.690
in but Len and Brett These are the data members along the dog.

06:01.690 --> 06:09.620
We also get the functions like initialize an area and change and we get these functions also.

06:15.870 --> 06:17.490
These other member functions.

06:17.490 --> 06:19.760
So let them but are they done in words.

06:19.770 --> 06:23.690
And these are the functions you can call all of them by using dot operator.

06:24.690 --> 06:30.100
So this is the transformation from C language to C++.

06:30.120 --> 06:33.280
Now one more time if you see this initialize function.

06:33.280 --> 06:35.190
This is initializing a rectangle.

06:35.190 --> 06:38.750
We need this function because the data on members has became private.

06:38.760 --> 06:46.380
We cannot directly set the lantern but now they do use initialization mostly C usual leave and would

06:46.380 --> 06:52.130
be cleared or create an object or declared a variable that they will leave it for initializing.

06:52.170 --> 06:57.390
So declaration and initialization if you remember a normal variable if you are declaring integer Knight

06:57.390 --> 07:00.800
variable then this the declaration as the last initial edition.

07:00.870 --> 07:06.330
So if you prefer the rectangle is also initialized at that time only so you stop passing it then come

07:06.400 --> 07:14.970
5 later on we want to Boston Common 5 here really we don't want this function we want Doric initialization

07:15.090 --> 07:23.040
at the time of declaration on me how is this possible for that I should have a function for initialization

07:23.730 --> 07:28.060
but we want it to be called automatically at the time of creation of an object.

07:28.170 --> 07:34.430
So yes same initialize function I will change the name I will call you guys rectangle.

07:34.950 --> 07:40.930
What does this this is say mask last name and no need off wipe out anything just right.

07:40.930 --> 07:41.900
Class name.

07:42.120 --> 07:44.150
This is having seen the address class name.

07:44.160 --> 07:47.230
So this becomes a constructor yes.

07:47.250 --> 07:49.280
This is a construct.

07:49.620 --> 07:55.020
This will be automatic because the card whenever we are creating an object it does the job of initializing

07:55.020 --> 07:55.870
an object.

07:56.160 --> 07:58.410
It stops calling that function as initialize.

07:58.410 --> 08:04.120
We are calling this constructor and we are giving the same name as class name search to initialize it

08:04.120 --> 08:05.160
a function.

08:05.160 --> 08:11.040
So constructor that we say so function which creates the object and initialized object we see like this.

08:11.040 --> 08:14.550
So that's what is having the same name as class name.

08:15.330 --> 08:20.700
Now let us look at the class once again rectangle class is having private members and the public member

08:20.700 --> 08:26.250
function as a constructor which is initializing the members an idea function which returns lent and

08:26.260 --> 08:28.810
built by calculating it and changing it.

08:28.940 --> 08:31.310
Now these functions are being called here.

08:31.470 --> 08:39.270
So let us see the king know once you create an object of rectangle by passing 10 5 then object is created

08:39.450 --> 08:42.100
like this and automatically this function is gone.

08:42.360 --> 08:48.310
This will take 10 and this will take 5 so it will assign 10 and 5 so 10 and five were assigned.

08:49.180 --> 08:51.150
Then make some calling idea function.

08:51.150 --> 08:57.310
So this idea function will be called upon this rectangle by multiplying Linden bread.

08:57.420 --> 08:58.430
It will return.

08:58.520 --> 09:05.640
So I'm not using that value then change and so on this rectangle only because this is what this function

09:05.640 --> 09:10.040
is called which will modify left and subsidize new land.

09:10.110 --> 09:11.290
So I'm sitting pretty.

09:11.430 --> 09:13.300
So this will become trendy.

09:13.860 --> 09:20.300
So this style I have adopted for converting C language code to C++ code in my course.

09:20.340 --> 09:26.340
In the next video you can see I was right on the same class once again just like a C++ program.

09:26.430 --> 09:26.780
Right.

09:26.790 --> 09:27.230
Right.

09:27.240 --> 09:28.430
Fresh from the beginning.
