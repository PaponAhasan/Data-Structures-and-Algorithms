WEBVTT

00:00.350 --> 00:08.670
And this we do unexplainable template classes C++ programming support genetic functions and the genetic

00:08.790 --> 00:16.860
glosses genetic functions automatic big functions and plus Assad template classes it functions I'm not

00:17.220 --> 00:21.580
explaining them separately I'm explaining Jedi classes that include generic function also.

00:22.200 --> 00:24.880
So already I have an example glossary done here.

00:24.880 --> 00:27.030
First I will explain that example class.

00:27.180 --> 00:32.110
Then I'll show you what does it mean by genetic and I will convert it into a genetic class.

00:32.160 --> 00:34.280
Let us look at the class.

00:34.410 --> 00:42.930
Here is a class called a comic and to determine was a and b integer type that does a constructor Guster

00:43.030 --> 00:47.290
it sticking to two parameters just again the bottom with the names I have to come see him name and B.

00:47.610 --> 00:51.570
So these are the class members and these are the parameters.

00:51.600 --> 00:58.110
So we call this as this a or this b and d up but I mean just a B then I have just two simple functions

00:58.110 --> 01:03.570
for adding those two numbers and eight on that other and subtracting those two numbers not a thing.

01:03.900 --> 01:10.640
So there's a simple automatic class plate so so that we can focus on the template.

01:10.640 --> 01:16.730
Not next here I have implemented all these functions outside the class using scope resolution all designed

01:16.770 --> 01:17.780
of glass.

01:17.820 --> 01:24.570
But if you look at this first as a constructor automatic integer a B so a b are about I make us and

01:24.660 --> 01:32.550
this A B are D AP So Ruby sunshade between them no other names are same so we have to set this gaps

01:32.820 --> 01:38.550
a Anderson gaps b because this is a pointer to the current object.

01:38.550 --> 01:39.740
The same object.

01:39.870 --> 01:42.700
So how do we use this at 0 8.

01:42.750 --> 01:44.520
And this will be this.

01:44.580 --> 01:47.580
This is a and this is B and D.

01:47.590 --> 01:55.440
What better make us not next decide the function does it subtract function using class name and scope

01:55.460 --> 01:55.980
resolution.

01:56.040 --> 01:57.480
So just look at the plus one.

01:57.480 --> 02:02.310
So you must be familiar with this already in the previous we do have explained you hold water to glass

02:02.400 --> 02:08.760
everything I'm explaining does adding understanding this is subtracting and B and I think both these

02:08.760 --> 02:11.860
functions identically accessing the members.

02:11.860 --> 02:18.080
Now let us talk about generic classes for understanding that first of all let us look at the class.

02:18.090 --> 02:24.240
This automatic class is performing automatic opportunity to try and subtraction on integer type of data.

02:24.900 --> 02:27.780
What about float type of data.

02:28.350 --> 02:32.290
If I want to use long and order if I want to use a double then what.

02:33.300 --> 02:38.490
So for them this gloss in the notebook I have to write a separate class for it.

02:39.150 --> 02:40.010
Yes.

02:40.200 --> 02:47.020
So I should write a separate class for again floating point type of data on performing it ultimately

02:47.720 --> 02:48.550
official level.

02:48.570 --> 02:54.600
Do different classes just for a change of data type but all operations are same real performing same

02:54.600 --> 02:56.770
thing for addition and subtraction.

02:56.960 --> 03:05.400
Show that I've done the class no C++ says that you can use the same class for multiple data types at

03:05.410 --> 03:09.210
I time you can use only one day a time so it works for any type of data.

03:09.630 --> 03:15.570
So for any type of data it is called as a generic class and that is defined as a template.

03:15.690 --> 03:21.760
So no let us convert this class as a generic class using template so I will just write on the chord

03:21.780 --> 03:24.910
it is just like sprinkling some gourd inside this one.

03:25.080 --> 03:28.030
I think something more extra to make it as genetic.

03:28.080 --> 03:32.340
So how do you change the existing class into a generic class.

03:32.340 --> 03:36.260
I'm explaining that one and this is what I have followed in my course.

03:36.420 --> 03:40.790
I have done the class than they made it as a generic plus let us convert the simple generic.

03:41.370 --> 03:48.240
So first of all this plus the body of the classes starts and ends here so they don't end click on the

03:48.240 --> 03:48.800
top.

03:48.810 --> 03:56.100
So C complete class B in Angola brackets so C Class B.

03:56.310 --> 04:02.310
This is complete now that the effect of that template will start from here and ends here.

04:03.180 --> 04:11.190
So the class became template and that variable generic radio velocity right now Richard Bob you want

04:11.190 --> 04:18.250
to make it as a generic these data inverse so Gundam as it be means no date or type genetic code the

04:18.260 --> 04:23.930
Dark Knight whatever the data type be one you can make that guitar type so pick and become Integer key

04:23.940 --> 04:27.260
can become flawed or can become double anything.

04:27.360 --> 04:31.710
Now coming into this automatic bottom eaters What are these.

04:31.710 --> 04:32.910
This relevant story here.

04:32.910 --> 04:34.040
This relevant story.

04:34.290 --> 04:36.090
So what does the data type of this be.

04:36.180 --> 04:38.740
So what should be the data type of this that also.

04:38.750 --> 04:46.590
D OK change it to be defaults or B so you have to check it will leave each one will be a complete don't

04:46.590 --> 04:51.420
write every reiterated what you find in desert B whichever should become you have to find out not gonna

04:51.420 --> 05:01.190
change it then I will add two numbers integers absolute depending on these type so what did Fuller done

05:01.460 --> 05:05.950
that has it if they are indeed ever there will be integer if they are flawed if it will be flawed.

05:06.170 --> 05:08.480
So this should also be B.

05:08.540 --> 05:10.840
And similarly this should also be B.

05:11.180 --> 05:15.790
So I have made all changes that are required for making it as a template.

05:17.000 --> 05:21.200
Now next the effect of template ends here.

05:21.290 --> 05:23.220
Nor does the body of a function.

05:23.320 --> 05:24.730
What about this.

05:24.820 --> 05:27.860
This is a constructor belonging to this class.

05:27.860 --> 05:31.080
So class is a template for function also becomes template.

05:31.120 --> 05:33.740
So yes I write on template once again here.

05:33.750 --> 05:34.300
Why.

05:34.420 --> 05:35.980
Because this has finished here.

05:36.220 --> 05:37.240
So again I don't.

05:37.240 --> 05:41.190
So that it can start in and he had start from this line and end here.

05:41.200 --> 05:48.340
So they don't template class t template class D class E.

05:49.060 --> 05:53.560
So if you observe here these are made in the MSD so these on civil liberty.

05:53.560 --> 05:57.160
These are template type template type.

05:57.270 --> 06:04.870
Now one more thing this class is a template class so remember whenever you use the class name you try

06:04.870 --> 06:06.790
to pass a template that I made there.

06:07.120 --> 06:10.360
So here I am using the class name as a part of scope resolution.

06:10.360 --> 06:19.860
So here I should write on B in brackets then write scope resolution does the change you have to do every

06:19.990 --> 06:20.310
voter.

06:20.320 --> 06:21.550
Very very very very thing.

06:21.550 --> 06:25.030
That last name you must have boss temper desk parameter.

06:25.360 --> 06:29.740
Otherwise you pass a day night that inside the function.

06:29.740 --> 06:30.760
There are no more changes.

06:30.790 --> 06:32.070
No genius at all.

06:32.200 --> 06:34.060
Not coming up with this.

06:34.060 --> 06:37.660
See this template has finished here that I can I should define a template here.

06:37.960 --> 06:49.230
So again the right template glossy t template class t that this class name automatic is a template.

06:49.290 --> 06:56.610
So it must be done like this then there on the bottom it does limit what is the return type of change

06:56.660 --> 06:57.260
it to be.

06:57.350 --> 07:02.760
So change it to be that these two are outdated.

07:02.900 --> 07:05.700
These two I did result of stored in C.

07:05.810 --> 07:07.600
So what should be the type of C.

07:07.610 --> 07:09.040
Same as their type.

07:09.200 --> 07:11.300
So C should also be D.

07:11.540 --> 07:18.840
Yes the results of B C in my code almost verbatim what I have declared data type variable name.

07:18.890 --> 07:23.080
Everything is changing pretty but it may not be true Always remember this one.

07:23.110 --> 07:29.330
So you have to observe and change it we what should be change on the index when you change it not this

07:29.390 --> 07:30.070
ends.

07:30.200 --> 07:33.660
Again for this I should write on a template class template.

07:33.680 --> 07:34.790
Class B

07:37.790 --> 07:45.890
then here for the class I should write B here and skip resolution on this also I should change so that

07:45.890 --> 07:50.500
solving this class has a change to a template class.

07:50.510 --> 07:52.190
No I relied on the main function.

07:52.190 --> 07:53.720
I will use this template class.

07:53.730 --> 07:56.690
So just let us write a mean function.

07:56.690 --> 08:01.170
So here in main function normal for the main function.

08:01.200 --> 08:04.910
I'm creating an object of automatic automatic

08:07.550 --> 08:13.280
automatic object an object name as a no automatic as a template.

08:13.610 --> 08:17.070
So very type of data on what you want integer float double.

08:17.120 --> 08:17.900
Which one.

08:17.900 --> 08:22.570
So here along with the class name I should write on the date type in.

08:23.150 --> 08:29.360
So now this object I've been gone it does a ah I have positive values 10 comma 5.

08:30.020 --> 08:35.020
Now this ultimate class in every way really what I have written D.

08:35.030 --> 08:36.790
That will be replaced by.

08:36.880 --> 08:43.460
And this class becomes a pure integer class so this work for integer type data these variables become

08:43.460 --> 08:45.450
integer that return types become integer.

08:45.460 --> 08:46.730
This bottom goes integer.

08:46.730 --> 08:48.590
Everything becomes integer.

08:48.770 --> 08:51.910
Now these 10 and five other integer values.

08:51.980 --> 08:58.610
If I want the result I can say it c out I think I'd call that function and it will give me the integer

08:58.700 --> 09:00.740
additional these two numbers.

09:00.740 --> 09:08.480
Now if I want the fluid clause then again make out the object of this and give a bottom and devise a

09:08.480 --> 09:09.490
flawed.

09:09.680 --> 09:17.360
And here I will give it does a lot of one on positive bottom meters like a one point five and one point

09:17.450 --> 09:18.220
two.

09:18.230 --> 09:19.920
These are the float values.

09:19.970 --> 09:24.410
Now see out a out of one dot I.

09:24.710 --> 09:31.020
This will give me additional these two float numbers right because the bottom of that is fluid right

09:32.000 --> 09:34.370
near the bottom and that is integer type.

09:34.670 --> 09:38.920
So here the object will be integer that he added will float for this one.

09:38.930 --> 09:41.480
Everything will become fluid.

09:41.620 --> 09:43.940
That is what I have written P that going to become float.

09:44.210 --> 09:48.920
So it means the same classes working as a float on sort integer also.

09:48.980 --> 09:51.330
So I don't have to write on two different classes.

09:51.370 --> 09:53.660
It works for any date or type.

09:54.230 --> 10:01.510
So whichever date or type you want you can have to mention it as a template so that's a complete plus

10:01.570 --> 10:03.170
so you can practice this one.

10:03.250 --> 10:09.770
So I have covered all the required concept of C and C++ programming that I'm using in my codes.

10:09.890 --> 10:13.330
So once you have finished this you can start learning the course.

10:13.330 --> 10:20.590
You can start the topics of data structures and the next section as about installation or set up required

10:20.620 --> 10:24.590
for writing C C++ programs for data structures.

10:24.670 --> 10:29.710
So if you already have the set up and you are already familiar you can skip that section and again start

10:29.710 --> 10:36.280
with the actual topics of data structures so that song I have covered all the topics that are used in

10:36.280 --> 10:37.580
my course.

10:37.600 --> 10:41.560
So if you are familiar with this then you can smoothly understand of course.

10:41.590 --> 10:44.160
So hope you will get a lot of benefit from the course.

10:44.200 --> 10:49.100
Spend enough time on each topic and practice the programs that fall into senior.
